# Generated by Django 2.0.6 on 2018-08-16 10:36

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtaildocs', '0007_merge'),
        ('wagtailcore', '0040_page_draft_title'),
        ('wagtailimages', '0020_add-verbose-name'),
        ('blog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseSiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_results_page', models.IntegerField(default=5, verbose_name='Results per page on search')),
                ('google_analytics_id', models.CharField(blank=True, help_text='Google Analytics ID (http://www.google.com/analytics/)', max_length=50)),
            ],
            options={
                'verbose_name': 'Various settings',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the card', max_length=255, verbose_name='title')),
                ('text', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Text')),
                ('footer', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Footer')),
                ('card_type', models.CharField(blank=True, choices=[('card-avatar', 'Avatar centered image'), ('', 'Plain'), ('card-background', 'Background')], default='', help_text='Check on components page', max_length=30, null=True, verbose_name='Card type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FooterText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rawhtml', models.CharField(default=' ', help_text='A text area for entering raw HTML which will be rendered unescaped in the page output.', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Footer Text',
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('excerpt', wagtail.core.fields.RichTextField(blank=True, help_text='The page description that will appear under the title.On Entry list, excerpt to be displayed.If this field is not filled, a truncate version of body text will be used.', verbose_name='Excerpt')),
                ('parallax_filter', models.CharField(blank=True, choices=[('filter filter-black', 'filter-black'), ('filter filter-white', 'filter-white'), ('filter filter-blue', 'filter-blue'), ('filter filter-azure', 'filter-azure'), ('filter filter-green', 'filter-green'), ('filter filter-orange', 'filter-orange'), ('filter filter-red', 'filter-red'), ('filter filter-white', 'filter-white'), ('', 'No filter')], default='filter-black', help_text='Filter effect', max_length=30, null=True, verbose_name='Image Filter')),
                ('parallax_size', models.CharField(blank=True, choices=[('parallax-small', 'Small'), ('parallax-medium', 'Medium'), ('parallax-large', 'Large')], default='parallax-small', help_text='Size effect', max_length=30, null=True, verbose_name='Image Size')),
                ('show_search', models.BooleanField(default=False, help_text='Whether a search form will appear in automatically generated menus', verbose_name='Show search in menus')),
                ('menu_icon', models.CharField(blank=True, max_length=60, null=True, verbose_name='Icon Class')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Header image')),
            ],
            options={
                'verbose_name': 'Homepage',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='LinkFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_external', models.URLField(blank=True, help_text='Set an external link if you want the link to point somewhere outside the CMS.', null=True, verbose_name='External link')),
            ],
        ),
        migrations.CreateModel(
            name='StandardPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField([('heading_block', wagtail.core.blocks.StructBlock([('heading_text', wagtail.core.blocks.CharBlock(classname='title', required=True)), ('size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], help_text='Custom StructBlock that allows the user to select h2 - h4 sizes for headers', required=False))])), ('intro', wagtail.core.blocks.RichTextBlock(icon='pilcrow')), ('paragraph_block', wagtail.core.blocks.RichTextBlock(icon='fa-paragraph', template='blocks/block_paragraph.html')), ('aligned_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('size', wagtail.core.blocks.CharBlock(help_text='It must be defined in wagtail picture redimension tag: width-640, height-480, fill-200x200-c100 or original (which is the default option)', label='Image resize', required=False)), ('alignment', wagtail.core.blocks.ChoiceBlock(choices=[('float-left', 'Wrap left'), ('float-right', 'Wrap right'), ('mx-auto d-block', 'Mid width')])), ('shape', wagtail.core.blocks.ChoiceBlock(choices=[('rounded', 'Rounded Corner'), ('rounded-circle', 'Circle'), ('img-thumbnail', 'Thumbnail'), ('img-fluid', 'Responsive'), (' ', 'No Shape')]))], icon='image', label='Aligned image')), ('aligned_html', wagtail.core.blocks.RawHTMLBlock(icon='code', label='Raw HTML')), ('document', wagtail.documents.blocks.DocumentChooserBlock(icon='doc-full-inverse')), ('block_quote', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.TextBlock()), ('attribute_name', wagtail.core.blocks.CharBlock(blank=True, help_text='Custom StructBlock that allows the user to attribute a quote to the author', label='e.g. Mary Berry', required=False))])), ('block_parallax', wagtail.core.blocks.StructBlock([('parallax_image', wagtail.images.blocks.ImageChooserBlock()), ('parallax_size', wagtail.core.blocks.ChoiceBlock(choices=[('parallax-small', 'Small'), ('parallax-medium', 'Medium'), ('parallax-large', 'Large')], help_text='Parallax size')), ('parallax_filter', wagtail.core.blocks.ChoiceBlock(choices=[('filter filter-black', 'filter-black'), ('filter filter-white', 'filter-white'), ('filter filter-blue', 'filter-blue'), ('filter filter-azure', 'filter-azure'), ('filter filter-green', 'filter-green'), ('filter filter-orange', 'filter-orange'), ('filter filter-red', 'filter-red'), ('filter filter-white', 'filter-white'), ('', 'No filter')], help_text='Filter effect')), ('display_btndropdown', wagtail.core.blocks.BooleanBlock(default=False, help_text='Display dropdown button', required=False)), ('parallax_content', wagtail.core.blocks.StructBlock([('parallax_head', wagtail.core.blocks.CharBlock(blank=True, classname='title', help_text='You can split the title using "|". It will add small .subtitle class.', label='Head', required=False)), ('parallax_text', wagtail.core.blocks.RichTextBlock(blank=True, label='Text', null=True, required=False)), ('parallax_pro', wagtail.core.blocks.CharBlock(blank=True, label='Pro', null=True, required=False))]))])), ('embed_block', wagtail.embeds.blocks.EmbedBlock(help_text='Insert an embed URL e.g https://www.youtube.com/embed/SGJFWirQ3ks', icon='fa-s15', template='blocks/block_embed.html'))], blank=True, help_text='Content', null=True, verbose_name='Body')),
                ('excerpt', wagtail.core.fields.RichTextField(blank=True, help_text='The page description that will appear under the title.On Entry list, excerpt to be displayed.If this field is not filled, a truncate version of body text will be used.', verbose_name='Excerpt')),
                ('parallax_filter', models.CharField(blank=True, choices=[('filter filter-black', 'filter-black'), ('filter filter-white', 'filter-white'), ('filter filter-blue', 'filter-blue'), ('filter filter-azure', 'filter-azure'), ('filter filter-green', 'filter-green'), ('filter filter-orange', 'filter-orange'), ('filter filter-red', 'filter-red'), ('filter filter-white', 'filter-white'), ('', 'No filter')], default='filter-black', help_text='Filter effect', max_length=30, null=True, verbose_name='Image Filter')),
                ('parallax_size', models.CharField(blank=True, choices=[('parallax-small', 'Small'), ('parallax-medium', 'Medium'), ('parallax-large', 'Large')], default='parallax-small', help_text='Size effect', max_length=30, null=True, verbose_name='Image Size')),
                ('show_search', models.BooleanField(default=False, help_text='Whether a search form will appear in automatically generated menus', verbose_name='Show search in menus')),
                ('menu_icon', models.CharField(blank=True, max_length=60, null=True, verbose_name='Icon Class')),
                ('twitter', wagtail.core.fields.StreamField([('twitter', wagtail.core.blocks.StructBlock([('twitter_box_username', wagtail.core.blocks.CharBlock(required=True)), ('twitter_box_widget_id', wagtail.core.blocks.CharBlock(required=True)), ('twitter_box_tweet_limit', wagtail.core.blocks.CharBlock(max_length=2, required=True))]))], blank=True, null=True, verbose_name='Twitter side contents')),
                ('feed_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Header image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePageCard',
            fields=[
                ('card_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Card')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('card_items', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_items', to='base.HomePage')),
            ],
            options={
                'abstract': False,
            },
            bases=('base.card', models.Model),
        ),
        migrations.CreateModel(
            name='RelatedLink',
            fields=[
                ('linkfields_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.LinkFields')),
                ('title', models.CharField(help_text='Link title', max_length=255)),
            ],
            bases=('base.linkfields',),
        ),
        migrations.AddField(
            model_name='linkfields',
            name='link_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blog.Category', verbose_name='Blog Category'),
        ),
        migrations.AddField(
            model_name='linkfields',
            name='link_document',
            field=models.ForeignKey(blank=True, help_text='Choose an existing document if you want the link to open a document.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document'),
        ),
        migrations.AddField(
            model_name='linkfields',
            name='link_page',
            field=models.ForeignKey(blank=True, help_text='Choose an existing page if you want the link to point somewhere inside the CMS.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='card',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Header image'),
        ),
        migrations.AddField(
            model_name='basesitesettings',
            name='contact_us',
            field=models.ForeignKey(blank=True, help_text='Choose an existing page if you want the link to point somewhere inside the CMS.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Internal link to contact us page'),
        ),
        migrations.AddField(
            model_name='basesitesettings',
            name='site',
            field=models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site'),
        ),
        migrations.CreateModel(
            name='HomePageRelatedLink',
            fields=[
                ('relatedlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.RelatedLink')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='base.HomePage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
            bases=('base.relatedlink', models.Model),
        ),
        migrations.CreateModel(
            name='StandardPageRelatedLink',
            fields=[
                ('relatedlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.RelatedLink')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='base.StandardPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
            bases=('base.relatedlink', models.Model),
        ),
    ]
